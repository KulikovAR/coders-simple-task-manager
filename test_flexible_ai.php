<?php

require_once 'vendor/autoload.php';

use App\Services\Ai\FlexibleAiAgentService;
use App\Services\Ai\CommandRegistry;
use App\Services\Ai\ContextProviders\UserContextProvider;
use App\Services\Ai\ContextProviders\ProjectContextProvider;
use App\Services\Ai\ContextProviders\UsersContextProvider;
use App\Services\ProjectService;
use App\Services\TaskService;
use App\Services\SprintService;
use App\Services\CommentService;
use App\Services\AiConversationService;
use App\Models\User;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Laravel
$app = require_once 'bootstrap/app.php';
$app->make(Illuminate\Contracts\Console\Kernel::class)->bootstrap();

echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±–∫–æ–≥–æ –ò–ò –∞–≥–µ–Ω—Ç–∞\n";
echo "================================\n\n";

// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
$commandRegistry = new CommandRegistry(
    app(ProjectService::class),
    app(TaskService::class),
    app(SprintService::class),
    app(CommentService::class)
);

$contextProviders = [
    new UserContextProvider(),
    new ProjectContextProvider(app(ProjectService::class)),
    new UsersContextProvider(),
];

$conversationService = app(AiConversationService::class);

$aiAgent = new FlexibleAiAgentService($commandRegistry, $contextProviders, $conversationService);

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
$user = User::first();
if (!$user) {
    echo "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
    exit(1);
}

echo "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {$user->name}\n\n";

// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
$testQueries = [
    "—Ä–∞—Å—Å–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞",
    "–∫–∞–∫–∏–µ —É –º–µ–Ω—è –∑–∞–¥–∞—á–∏?",
    "—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –∑–∞–¥–∞—á–∞–º–∏?",
    "–ø–æ–∫–∞–∂–∏ –º–æ–∏ –∑–∞–¥–∞—á–∏ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é",
    "–∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ?",
    "—á—Ç–æ –≥–æ—Ç–æ–≤–æ?",
];

foreach ($testQueries as $query) {
    echo "ü§ñ –ó–∞–ø—Ä–æ—Å: {$query}\n";
    echo "---\n";
    
    try {
        $result = $aiAgent->processRequest($query, $user);
        
        echo "‚úÖ –£—Å–ø–µ—Ö: " . ($result['success'] ? '–î–∞' : '–ù–µ—Ç') . "\n";
        echo "üìù –û—Ç–≤–µ—Ç: " . $result['message'] . "\n";
        echo "üÜî Session ID: " . ($result['session_id'] ?? '–ù–µ—Ç') . "\n";
        echo "‚ö° –ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: " . ($result['commands_executed'] ?? 0) . "\n";
        echo "‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: " . ($result['processing_time'] ?? 0) . " —Å–µ–∫\n";
        
        if (isset($result['command_results']) && !empty($result['command_results'])) {
            echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥:\n";
            foreach ($result['command_results'] as $i => $cmdResult) {
                echo "  {$i}: " . ($cmdResult['success'] ? '‚úÖ' : '‚ùå') . " " . $cmdResult['message'] . "\n";
            }
        }
        
    } catch (Exception $e) {
        echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
    }
    
    echo "\n" . str_repeat("=", 50) . "\n\n";
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    sleep(1);
}

echo "üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"; 
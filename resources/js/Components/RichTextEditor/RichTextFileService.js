/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –≤ RichTextEditor
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
 */
class RichTextFileService {
    constructor() {
        this.maxFileSize = 50 * 1024 * 1024; // 50MB
        this.allowedTypes = [
            // –î–æ–∫—É–º–µ–Ω—Ç—ã
            'application/pdf',
            'application/msword',
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'application/vnd.ms-excel',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'application/vnd.ms-powerpoint',
            'application/vnd.openxmlformats-officedocument.presentationml.presentation',
            'text/plain',
            'text/csv',
            // –ê—Ä—Ö–∏–≤—ã
            'application/zip',
            'application/x-rar-compressed',
            'application/x-7z-compressed',
            // –ê—É–¥–∏–æ
            'audio/mpeg',
            'audio/wav',
            'audio/ogg',
            'audio/mp4',
            // –í–∏–¥–µ–æ
            'video/mp4',
            'video/avi',
            'video/mov',
            'video/wmv',
            'video/webm',
            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—É–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è)
            'image/jpeg',
            'image/png',
            'image/gif',
            'image/webp',
            'image/svg+xml',
        ];
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
     */
    canUploadFile(file) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        if (file.size > this.maxFileSize) {
            return {
                canUpload: false,
                error: `–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${this.formatFileSize(this.maxFileSize)}`
            };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø
        if (!this.allowedTypes.includes(file.type)) {
            return {
                canUpload: false,
                error: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: ${file.type}`
            };
        }

        return { canUpload: true };
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
     */
    async uploadFile(file, attachableType, attachableId, description = '') {
        try {
            const validation = this.canUploadFile(file);
            if (!validation.canUpload) {
                throw new Error(validation.error);
            }

            const formData = new FormData();
            formData.append('file', file);
            formData.append('attachable_type', attachableType);
            formData.append('attachable_id', attachableId);
            if (description) {
                formData.append('description', description);
            }

            const response = await fetch('/file-upload', {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Accept': 'application/json',
                    'X-CSRF-TOKEN': this.getCsrfToken(),
                },
                body: formData,
                credentials: 'same-origin'
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
            }

            const result = await response.json();
            console.log('RichTextFileService: –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
            
            if (!result.success) {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
            }

            if (!result.data) {
                console.error('RichTextFileService: result.data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç:', result);
                throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞');
            }

            return {
                success: true,
                file: result.data,
                message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω'
            };

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
            return {
                success: false,
                error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞'
            };
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async deleteFile(fileId) {
        try {
            const response = await fetch(`/file-upload/${fileId}`, {
                method: 'DELETE',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Accept': 'application/json',
                    'X-CSRF-TOKEN': this.getCsrfToken(),
                },
                credentials: 'same-origin'
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
            }

            const result = await response.json();
            
            if (!result.success) {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
            }

            return {
                success: true,
                message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
            };

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
            return {
                success: false,
                error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞'
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–∞–π–ª–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getUserFileStats() {
        try {
            const response = await fetch('/file-upload/user-stats', {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Accept': 'application/json',
                },
                credentials: 'same-origin'
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            }

            const result = await response.json();
            
            if (!result.success) {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            }

            return result.data;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–æ–≤:', error);
            return null;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    formatFileSize(bytes) {
        if (!bytes) return '0 –ë';
        
        const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
        if (bytes === 0) return '0 –ë';
        
        const i = Math.floor(Math.log(bytes) / Math.log(1024));
        return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç CSRF —Ç–æ–∫–µ–Ω –∏–∑ –º–µ—Ç–∞-—Ç–µ–≥–∞
     */
    getCsrfToken() {
        const token = document.querySelector('meta[name="csrf-token"]');
        return token ? token.getAttribute('content') : '';
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
     */
    getFileIcon(mimeType) {
        if (!mimeType) return 'üìé';
        
        if (mimeType.startsWith('image/')) return 'üñºÔ∏è';
        if (mimeType.startsWith('video/')) return 'üé•';
        if (mimeType.startsWith('audio/')) return 'üéµ';
        if (mimeType.includes('pdf')) return 'üìÑ';
        if (mimeType.includes('word') || mimeType.includes('document')) return 'üìù';
        if (mimeType.includes('excel') || mimeType.includes('spreadsheet')) return 'üìä';
        if (mimeType.includes('powerpoint') || mimeType.includes('presentation')) return 'üìΩÔ∏è';
        if (mimeType.includes('zip') || mimeType.includes('rar') || mimeType.includes('7z')) return 'üì¶';
        if (mimeType.includes('text/')) return 'üìÑ';
        
        return 'üìé';
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
     */
    isImageFile(file) {
        return file.type.startsWith('image/');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
     */
    isDocumentFile(file) {
        return file.type.includes('pdf') || 
               file.type.includes('word') || 
               file.type.includes('excel') || 
               file.type.includes('powerpoint') ||
               file.type.includes('text/');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∞—Ä—Ö–∏–≤–æ–º
     */
    isArchiveFile(file) {
        return file.type.includes('zip') || 
               file.type.includes('rar') || 
               file.type.includes('7z');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∞—É–¥–∏–æ
     */
    isAudioFile(file) {
        return file.type.startsWith('audio/');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∏–¥–µ–æ
     */
    isVideoFile(file) {
        return file.type.startsWith('video/');
    }
}

export default RichTextFileService;

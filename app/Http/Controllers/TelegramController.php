<?php

namespace App\Http\Controllers;

use App\Models\User;
use App\Services\Ai\ContextProviders\DynamicStatusContextProvider;
use App\Services\TaskStatusService;
use App\Services\TelegramService;
use App\Services\Ai\FlexibleAiAgentService;
use App\Services\Ai\CommandRegistry;
use App\Services\Ai\ContextProviders\UserContextProvider;
use App\Services\Ai\ContextProviders\ProjectContextProvider;
use App\Services\Ai\ContextProviders\UsersContextProvider;
use App\Services\Ai\ContextProviders\EnumsContextProvider;
use App\Services\ProjectService;
use App\Services\TaskService;
use App\Services\SprintService;
use App\Services\CommentService;
use App\Services\AiConversationService;
use App\Services\TelegramVoiceService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Symfony\Component\HttpFoundation\Response;

class TelegramController extends Controller
{
    public function webhook(Request $request): Response
    {
        $secret = (string) config('telegram.webhook_secret');
        if ($secret !== '') {
            $incoming = (string) $request->header('X-Telegram-Bot-Api-Secret-Token', '');
            if (!hash_equals($secret, $incoming)) {
                return response()->noContent(403);
            }
        }

        $update = $request->all();

        try {
            $message = $update['message'] ?? $update['edited_message'] ?? null;
            if (!$message) {
                return response()->noContent();
            }

            $chat = $message['chat'] ?? [];
            $chatId = $chat['id'] ?? null;
            $chatType = $chat['type'] ?? 'private';
            $from = $message['from'] ?? [];
            $fromId = isset($from['id']) ? (string) $from['id'] : null;
            $botUsername = config('telegram.bot_username');
            $botLink = $botUsername ? ('https://t.me/' . ltrim($botUsername, '@')) : null;
            $text = trim((string) ($message['text'] ?? ''));

            /** @var TelegramService $tg */
            $tg = app(TelegramService::class);

            if (!$chatId) {
                return response()->noContent();
            }

            // –û–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –∫–∞–∂–¥–æ–º /start (–±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –¥—ë—à–µ–≤–æ)
            if (in_array($text, ['/start', 'start', 'Start'], true)) {
                $linkedUser = $fromId ? User::where('telegram_chat_id', $fromId)->first() : null;
                
                // –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                $commands = [
                    ['command' => 'ai', 'description' => '–û–±—â–µ–Ω–∏–µ —Å –ò–ò: /ai <–∑–∞–ø—Ä–æ—Å>'],
                    ['command' => 'id', 'description' => '–ü–æ–∫–∞–∑–∞—Ç—å chatId –∏ senderId'],
                    ['command' => 'start', 'description' => '–°–ø—Ä–∞–≤–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'],
                ];
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É stats —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id = 1
                if ($linkedUser && $linkedUser->id === 1) {
                    $commands[] = ['command' => 'stats', 'description' => '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)'];
                }
                
                $tg->setMyCommands($commands);
            }

            // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            if (in_array($text, ['/start', 'start', 'Start'], true)) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –ø–æ senderId (–≤ –≥—Ä—É–ø–ø–∞—Ö chatId = id –≥—Ä—É–ø–ø—ã)
                $linkedUser = $fromId ? User::where('telegram_chat_id', $fromId)->first() : null;

                if ($linkedUser) {
                    $help = '<b>‚úÖ Telegram —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.</b>' . "\n\n" .
                        '<b>–ö–æ–º–∞–Ω–¥—ã:</b>' . "\n" .
                        '<code>/ai –≤–∞—à –∑–∞–ø—Ä–æ—Å</code> ‚Äî –æ–±—â–µ–Ω–∏–µ —Å –ò–ò' . "\n" .
                        '<code>/id</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å chatId –∏ senderId' . "\n" .
                        '<code>/start</code> ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è' . "\n\n" .
                        '<b>–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>' . "\n" .
                        'üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò';
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É stats —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id = 1
                    if ($linkedUser->id === 1) {
                        $help .= "\n" . '<code>/stats</code> ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)';
                    }
                    
                    if ($chatType !== 'private') {
                        $help .= "\n\n" . '<i>–í—ã –ø–∏—à–µ—Ç–µ –≤ –≥—Ä—É–ø–ø–µ. –î–ª—è –ª–∏—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –≤ –ª–∏—á–∫–µ</i>';
                        if ($botLink) {
                            $help .= ' ‚Äî <a href="' . $botLink . '">–æ—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞</a>';
                        }
                    }
                    $tg->sendMessage($chatId, $help);
                } else {
                    $help = '<b>–Ø –±–æ—Ç‚Äë–ø–æ–º–æ—â–Ω–∏–∫</b>: –ø—Ä–∏—Å—ã–ª–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ–±—â–∞—é—Å—å —Å –ò–ò.' . "\n\n" .
                        '<b>–í–∞—à chatId:</b> <code>' . $chatId . '</code>' . "\n" .
                        ($fromId ? ('<b>–í–∞—à senderId:</b> <code>' . $fromId . '</code>' . "\n") : '') .
                        "\n" . '<b>–ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å:</b>' . "\n" .
                        '‚Äî –í—Å—Ç–∞–≤—å—Ç–µ <u>senderId</u> –≤ –ø–æ–ª–µ Telegram –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ —Å–∞–π—Ç–µ' . "\n" .
                        '‚Äî –ò–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π email –¥–ª—è –∞–≤—Ç–æ–ø—Ä–∏–≤—è–∑–∫–∏';
                    if ($botLink) {
                        $help .= "\n" . '–õ–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º: <a href="' . $botLink . '">' . $botLink . '</a>';
                    }
                    $help .= "\n\n" . '<b>–ö–æ–º–∞–Ω–¥—ã:</b>' . "\n" .
                        '<code>/ai –≤–∞—à –∑–∞–ø—Ä–æ—Å</code> ‚Äî –æ–±—â–µ–Ω–∏–µ —Å –ò–ò' . "\n" .
                        '<code>/id</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å chatId –∏ senderId' . "\n" .
                        '<code>/stats</code> ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)' . "\n" .
                        '<code>/start</code> ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
                    $tg->sendMessage($chatId, $help);
                }
                return response()->noContent();
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /id
            if (in_array($text, ['/id', 'id', 'ID'], true)) {
                $idText = '<b>–í–∞—à chatId:</b> <code>' . $chatId . '</code>';
                if ($fromId) {
                    $idText .= "\n<b>–í–∞—à senderId:</b> <code>" . $fromId . '</code>\n<i>–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ senderId</i>';
                }
                $tg->sendMessage($chatId, $idText);
                return response()->noContent();
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id = 1)
            if (in_array($text, ['/stats', 'stats', 'STATS'], true)) {
                $user = $fromId ? User::where('telegram_chat_id', $fromId)->first() : null;
                
                if (!$user || $user->id !== 1) {
                    $tg->sendMessage($chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
                    return response()->noContent();
                }

                try {
                    $statsText = $this->getProjectStats();
                    $tg->sendMessage($chatId, $statsText);
                } catch (\Throwable $e) {
                    Log::error('Telegram stats error', ['error' => $e->getMessage()]);
                    $tg->sendMessage($chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
                }

                return response()->noContent();
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if (isset($message['voice'])) {
                /** @var TelegramVoiceService $voiceService */
                $voiceService = app(TelegramVoiceService::class);
                $voiceService->processVoiceMessage($message, $chatId);
                return response()->noContent();
            }

            // /ai <–∑–∞–ø—Ä–æ—Å>
            if (str_starts_with(mb_strtolower($text), '/ai')) {
                $user = $fromId ? User::where('telegram_chat_id', $fromId)->first() : null;
                if (!$user) {
                    $msg = '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à <b>senderId</b> –≤ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ —Å–∞–π—Ç–µ (–ø–æ–ª–µ Telegram chatId).';
                    if ($botLink) {
                        $msg .= "\n–õ–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º: <a href=\"" . $botLink . '\">–ø–µ—Ä–µ–π—Ç–∏</a>';
                    }
                    $tg->sendMessage($chatId, $msg);
                    return response()->noContent();
                }

                $prompt = trim(mb_substr($text, 3));
                if ($prompt === '') {
                    $tg->sendMessage($chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ai –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: /ai —Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É "–°–≤–µ—Ä—Å—Ç–∞—Ç—å —Ö–µ–¥–µ—Ä" –≤ –ø—Ä–æ–µ–∫—Ç–µ Site.');
                    return response()->noContent();
                }

                try {
                    $tg->sendMessage($chatId, '‚è≥');

                    $ai = $this->createFlexibleAiAgentService();
                    $result = $ai->processRequest($prompt, $user, null);

                    $reply = $result['message'] ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.';
                    $tg->sendMessage($chatId, $reply);
                } catch (\Throwable $e) {
                    Log::error('Telegram AI error', ['error' => $e->getMessage()]);
                    $tg->sendMessage($chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                }

                return response()->noContent();
            }

            if (filter_var($text, FILTER_VALIDATE_EMAIL)) {
                $user = User::where('email', $text)->first();
                if ($user) {
                    $user->telegram_chat_id = (string) ($fromId ?: $chatId);
                    $user->save();
                    $tg->sendMessage($chatId, 'Telegram —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.');
                } else {
                    $tg->sendMessage($chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /id, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å senderId –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å.');
                }
            } else {
                // –≠—Ö–æ-–ø–æ–¥—Å–∫–∞–∑–∫–∞ —Å HTML-–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
                $hint = '<b>–Ø –±–æ—Ç‚Äë–ø–æ–º–æ—â–Ω–∏–∫</b>: –ø—Ä–∏—Å—ã–ª–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ–±—â–∞—é—Å—å —Å –ò–ò.' . "\n\n" .
                    '<b>–ö–æ–º–∞–Ω–¥—ã:</b>' . "\n" .
                    '<code>/ai –≤–∞—à –∑–∞–ø—Ä–æ—Å</code> ‚Äî –æ–±—â–µ–Ω–∏–µ —Å –ò–ò' . "\n" .
                    '<code>/id</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å chatId –∏ senderId' . "\n" .
                    '<code>/start</code> ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è' . "\n\n" .
                    '<b>–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>' . "\n" .
                    'üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò' . "\n\n" .
                    '–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π <b>email</b> –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ <u>senderId</u> –≤ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ —Å–∞–π—Ç–µ.';
                if ($botLink) {
                    $hint .= "\n" . '–õ–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º: <a href="' . $botLink . '">' . $botLink . '</a>';
                }
                $tg->sendMessage($chatId, $hint);
            }

            return response()->noContent();
        } catch (\Throwable $e) {
            Log::error('Telegram webhook error', ['error' => $e->getMessage()]);
            return response()->noContent();
        }
    }

    private function createFlexibleAiAgentService(): FlexibleAiAgentService
    {
        $commandRegistry = new CommandRegistry(
            app(ProjectService::class),
            app(TaskService::class),
            app(SprintService::class),
            app(CommentService::class)
        );

        $contextProviders = [
            new UserContextProvider(),
            new ProjectContextProvider(app(ProjectService::class)),
            new UsersContextProvider(),
            new EnumsContextProvider(),
            new DynamicStatusContextProvider(app(TaskStatusService::class)),
        ];

        return new FlexibleAiAgentService($commandRegistry, $contextProviders, app(AiConversationService::class));
    }

    private function getProjectStats(): string
    {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        $totalUsers = User::count();
        $activeUsers = User::whereNotNull('email_verified_at')->count();
        $usersWithTelegram = User::whereNotNull('telegram_chat_id')->count();
        $usersWithSubscription = User::whereNotNull('subscription_id')->count();

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤
        $totalProjects = \App\Models\Project::count();
        $totalTasks = \App\Models\Task::count();

        return '<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞</b>' . "\n\n" .
            '<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>' . "\n" .
            '‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>' . $totalUsers . '</b>' . "\n" .
            '‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö): <b>' . $activeUsers . '</b>' . "\n" .
            '‚Ä¢ –° Telegram: <b>' . $usersWithTelegram . '</b>' . "\n" .
            '‚Ä¢ –° –ø–æ–¥–ø–∏—Å–∫–æ–π: <b>' . $usersWithSubscription . '</b>' . "\n\n" .
            '<b>üìã –ü—Ä–æ–µ–∫—Ç—ã –∏ –∑–∞–¥–∞—á–∏:</b>' . "\n" .
            '‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: <b>' . $totalProjects . '</b>' . "\n" .
            '‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: <b>' . $totalTasks . '</b>';
    }
}



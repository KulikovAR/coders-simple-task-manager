<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class TelescopeForceCleanupCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'telescope:force-cleanup 
                            {--keep-days=1 : –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è}
                            {--batch-size=500 : –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞}
                            {--timeout=30 : –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Telescope —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $keepDays = (int) $this->option('keep-days');
        $batchSize = (int) $this->option('batch-size');
        $timeout = (int) $this->option('timeout');

        $this->warn("üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê TELESCOPE");
        $this->warn("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–π SQL —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏");

        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
            DB::statement("SET SESSION wait_timeout = {$timeout}");
            DB::statement("SET SESSION interactive_timeout = {$timeout}");

            $this->info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü
            $tableInfo = DB::select("
                SELECT 
                    table_name,
                    ROUND(((data_length + index_length) / 1024 / 1024), 2) AS size_mb,
                    table_rows
                FROM information_schema.TABLES 
                WHERE table_schema = DATABASE()
                    AND table_name LIKE 'telescope_%'
                ORDER BY (data_length + index_length) DESC
            ");

            foreach ($tableInfo as $table) {
                $this->info("   {$table->table_name}: {$table->size_mb} MB ({$table->table_rows} –∑–∞–ø–∏—Å–µ–π)");
            }

            $this->info("\nüóëÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É...");

            $totalDeleted = 0;
            $batchCount = 0;

            do {
                $batchCount++;
                $this->info("   –ü–∞–∫–µ—Ç #{$batchCount}...");

                // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                $deletedTags = DB::statement("
                    DELETE FROM telescope_entries_tags 
                    WHERE entry_uuid IN (
                        SELECT uuid FROM telescope_entries 
                        WHERE created_at < DATE_SUB(NOW(), INTERVAL ? DAY)
                        LIMIT ?
                    )
                ", [$keepDays, $batchSize]);

                // –£–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                $deletedEntries = DB::statement("
                    DELETE FROM telescope_entries 
                    WHERE created_at < DATE_SUB(NOW(), INTERVAL ? DAY)
                    LIMIT ?
                ", [$keepDays, $batchSize]);

                $totalDeleted += $batchSize;

                $this->info("   –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {$totalDeleted}");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                $remaining = DB::selectOne("
                    SELECT COUNT(*) as count 
                    FROM telescope_entries 
                    WHERE created_at < DATE_SUB(NOW(), INTERVAL ? DAY)
                ", [$keepDays]);

                if ($remaining->count == 0) {
                    break;
                }

                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                sleep(1);

            } while ($batchCount < 50); // –ú–∞–∫—Å–∏–º—É–º 50 –ø–∞–∫–µ—Ç–æ–≤

            $this->info("\nüîß –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã...");
            
            try {
                DB::statement("OPTIMIZE TABLE telescope_entries");
                DB::statement("OPTIMIZE TABLE telescope_entries_tags");
                DB::statement("OPTIMIZE TABLE telescope_monitoring");
            } catch (\Exception $e) {
                $this->warn("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã: {$e->getMessage()}");
            }

            $this->info("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
            $finalInfo = DB::select("
                SELECT 
                    table_name,
                    ROUND(((data_length + index_length) / 1024 / 1024), 2) AS size_mb,
                    table_rows
                FROM information_schema.TABLES 
                WHERE table_schema = DATABASE()
                    AND table_name LIKE 'telescope_%'
                ORDER BY (data_length + index_length) DESC
            ");

            foreach ($finalInfo as $table) {
                $this->info("   {$table->table_name}: {$table->size_mb} MB ({$table->table_rows} –∑–∞–ø–∏—Å–µ–π)");
            }

            $this->info("\n‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
            $this->info("   –í—Å–µ–≥–æ –ø–∞–∫–µ—Ç–æ–≤: {$batchCount}");
            $this->info("   –ü—Ä–∏–º–µ—Ä–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {$totalDeleted}");

            return 0;

        } catch (\Exception $e) {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ: {$e->getMessage()}");
            return 1;
        }
    }
}

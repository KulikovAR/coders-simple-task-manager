<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class TelescopeCleanupCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'telescope:cleanup 
                            {--days=7 : –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π}
                            {--batch-size=1000 : –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è}
                            {--dry-run : –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è}
                            {--force : –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π Laravel Telescope';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $days = (int) $this->option('days');
        $batchSize = (int) $this->option('batch-size');
        $dryRun = $this->option('dry-run');
        $force = $this->option('force');

        $this->info("üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–µ–π Telescope —Å—Ç–∞—Ä—à–µ {$days} –¥–Ω–µ–π...");

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            $totalEntries = DB::table('telescope_entries')->count();
            $oldEntries = DB::table('telescope_entries')
                ->where('created_at', '<', now()->subDays($days))
                ->count();

            $this->info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
            $this->info("   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {$totalEntries}");
            $this->info("   –ó–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ä—à–µ {$days} –¥–Ω–µ–π: {$oldEntries}");

            if ($oldEntries === 0) {
                $this->info("‚úÖ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
                return 0;
            }

            if ($dryRun) {
                $this->info("üîç –†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:");
                $this->info("   –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {$oldEntries}");
                $this->info("   –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: {$batchSize}");
                return 0;
            }

            if (!$force) {
                if (!$this->confirm("‚ö†Ô∏è  –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {$oldEntries} –∑–∞–ø–∏—Å–µ–π?")) {
                    $this->info("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
                    return 0;
                }
            }

            $this->info("üóëÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∑–∞–ø–∏—Å–µ–π...");

            $deletedCount = 0;
            $startTime = microtime(true);

            // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            do {
                $entriesToDelete = DB::table('telescope_entries')
                    ->where('created_at', '<', now()->subDays($days))
                    ->limit($batchSize)
                    ->pluck('uuid');

                if ($entriesToDelete->isEmpty()) {
                    break;
                }

                // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ telescope_entries_tags
                DB::table('telescope_entries_tags')
                    ->whereIn('entry_uuid', $entriesToDelete)
                    ->delete();

                // –£–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                $deleted = DB::table('telescope_entries')
                    ->whereIn('uuid', $entriesToDelete)
                    ->delete();

                $deletedCount += $deleted;

                $this->info("   –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {$deletedCount} / {$oldEntries}");

                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                usleep(100000); // 0.1 —Å–µ–∫—É–Ω–¥—ã

            } while ($deletedCount < $oldEntries);

            $endTime = microtime(true);
            $executionTime = round($endTime - $startTime, 2);

            $this->info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
            $this->info("   –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {$deletedCount}");
            $this->info("   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {$executionTime} —Å–µ–∫—É–Ω–¥");

            // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            Log::info('Telescope cleanup completed', [
                'deleted_count' => $deletedCount,
                'execution_time' => $executionTime,
                'days_retained' => $days,
                'batch_size' => $batchSize
            ]);

            return 0;

        } catch (\Exception $e) {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Telescope: {$e->getMessage()}");
            Log::error('Telescope cleanup failed', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return 1;
        }
    }
}

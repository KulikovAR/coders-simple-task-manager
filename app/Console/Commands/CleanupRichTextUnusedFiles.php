<?php

namespace App\Console\Commands;

use App\Services\RichTextContentAnalyzerService;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Log;

class CleanupRichTextUnusedFiles extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'files:cleanup-richtext {--dry-run : –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–û—á–∏—â–∞–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∞–π–ª—ã –∏–∑ RichTextEditor –∫–æ–Ω—Ç–µ–Ω—Ç–∞';

    /**
     * Execute the console command.
     */
    public function handle(RichTextContentAnalyzerService $analyzerService)
    {
        $dryRun = $this->option('dry-run');

        $this->info('üîç –ê–Ω–∞–ª–∏–∑ RichTextEditor –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤...');

        try {
            if ($dryRun) {
                $this->info('üîç –†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (dry-run)');
                
                // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
                $unusedFiles = $analyzerService->analyzeAllRichTextContent();
                
                if (empty($unusedFiles)) {
                    $this->info('‚úÖ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                    return 0;
                }

                $this->warn("üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: " . count($unusedFiles));
                
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ç–∏–ø–∞–º –æ–±—ä–µ–∫—Ç–æ–≤
                $groupedFiles = [];
                foreach ($unusedFiles as $file) {
                    $key = $file->attachable_type . ':' . $file->attachable_id;
                    if (!isset($groupedFiles[$key])) {
                        $groupedFiles[$key] = [];
                    }
                    $groupedFiles[$key][] = $file;
                }

                // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
                foreach ($groupedFiles as $key => $files) {
                    [$attachableType, $attachableId] = explode(':', $key);
                    $shortType = class_basename($attachableType);
                    
                    $this->info("\nüìÅ {$shortType} #{$attachableId}:");
                    
                    foreach ($files as $file) {
                        $this->line("  ‚Ä¢ {$file->original_name} ({$this->formatFileSize($file->file_size)})");
                    }
                }

                $this->info("\nüí° –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ --dry-run");
                
            } else {
                $this->info('üóëÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ RichTextEditor...');
                
                // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
                $unusedFiles = $analyzerService->analyzeAllRichTextContent();
                
                if (empty($unusedFiles)) {
                    $this->info('‚úÖ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                    return 0;
                }
                
                $deletedCount = $analyzerService->cleanupUnusedFiles($unusedFiles);
                
                if ($deletedCount > 0) {
                    $this->info("‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {$deletedCount}");
                    Log::info("–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ RichTextEditor –∑–∞–≤–µ—Ä—à–µ–Ω–∞", ['deleted_count' => $deletedCount]);
                } else {
                    $this->info('‚úÖ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                }
            }

            return 0;

        } catch (\Exception $e) {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {$e->getMessage()}");
            Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ RichTextEditor', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return 1;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private function formatFileSize(int $bytes): string
    {
        if ($bytes === 0) return '0 –ë';
        
        $sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
        $i = floor(log($bytes, 1024));
        
        return round($bytes / pow(1024, $i), 2) . ' ' . $sizes[$i];
    }
}

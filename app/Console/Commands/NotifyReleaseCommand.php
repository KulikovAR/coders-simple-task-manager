<?php

namespace App\Console\Commands;

use App\Models\User;
use App\Services\TelegramService;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Log;

class NotifyReleaseCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'telegram:notify-release {message} {--ver=} {--dry-run} {--test-user=}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ä–µ–ª–∏–∑–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ Telegram (–∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $message = $this->argument('message');
        $version = $this->option('ver');
        $dryRun = $this->option('dry-run');
        $testUserId = $this->option('test-user');

        if (empty($message)) {
            $this->error('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
            return 1;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        $finalMessage = $this->formatReleaseMessage($message, $version);

        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ–º—É
        if ($testUserId !== null) {
            return $this->sendToTestUser($testUserId, $finalMessage, $dryRun);
        }

        if ($dryRun) {
            $this->info('–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (dry-run) - —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
            $this->info('–°–æ–æ–±—â–µ–Ω–∏–µ:');
            $this->line($finalMessage);
            
            try {
                $userCount = $this->getTelegramUsersCount();
                $this->info('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram: ' . $userCount);
            } catch (\Exception $e) {
                $this->warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' . $e->getMessage());
            }
            
            return 0;
        }

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (!$this->confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?')) {
            $this->info('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
            return 0;
        }

        $this->info('–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
        $this->info('–°–æ–æ–±—â–µ–Ω–∏–µ: ' . $finalMessage);

        $telegramService = app(TelegramService::class);
        
        if (!$telegramService->isEnabled()) {
            $this->error('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ');
            return 1;
        }

        $users = User::whereNotNull('telegram_chat_id')
            ->where('telegram_chat_id', '!=', '')
            ->get();

        if ($users->isEmpty()) {
            $this->warn('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º Telegram');
            return 0;
        }

        $this->info("–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram: {$users->count()}");

        $successCount = 0;
        $errorCount = 0;
        $progressBar = $this->output->createProgressBar($users->count());

        foreach ($users as $user) {
            try {
                $success = $telegramService->sendMessage($user->telegram_chat_id, $finalMessage);
                
                if ($success) {
                    $successCount++;
                } else {
                    $errorCount++;
                    Log::warning('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', [
                        'user_id' => $user->id,
                        'telegram_chat_id' => $user->telegram_chat_id,
                        'message' => $finalMessage
                    ]);
                }
            } catch (\Exception $e) {
                $errorCount++;
                Log::error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', [
                    'user_id' => $user->id,
                    'telegram_chat_id' => $user->telegram_chat_id,
                    'error' => $e->getMessage()
                ]);
            }

            $progressBar->advance();
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
            usleep(100000); // 0.1 —Å–µ–∫—É–Ω–¥—ã
        }

        $progressBar->finish();
        $this->newLine();

        $this->info("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {$successCount}");
        if ($errorCount > 0) {
            $this->warn("‚ùå –û—à–∏–±–æ–∫: {$errorCount}");
        }

        return 0;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–ª–∏–∑–µ
     */
    private function formatReleaseMessage(string $message, ?string $version): string
    {
        $header = "üöÄ <b>–ù–æ–≤—ã–π —Ä–µ–ª–∏–∑!</b>";
        
        if ($version) {
            $header .= " v{$version}";
        }
        
        return $header . "\n\n" . $message . "\n\n" . 
               "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! üíô";
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    private function sendToTestUser(int $userId, string $message, bool $dryRun): int
    {
        try {
            $user = User::find($userId);
            
            if (!$user) {
                $this->error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {$userId} –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return 1;
            }

            if (empty($user->telegram_chat_id)) {
                $this->error("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$user->name} (ID: {$userId}) –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Telegram");
                return 1;
            }

            $this->info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {$user->name} (ID: {$userId})");
            $this->info("Telegram Chat ID: {$user->telegram_chat_id}");
            $this->info("–°–æ–æ–±—â–µ–Ω–∏–µ:");
            $this->line($message);

            if ($dryRun) {
                $this->info('–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (dry-run) - —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                return 0;
            }

            $telegramService = app(TelegramService::class);
            
            if (!$telegramService->isEnabled()) {
                $this->error('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ');
                return 1;
            }

            $success = $telegramService->sendMessage($user->telegram_chat_id, $message);
            
            if ($success) {
                $this->info('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
                return 0;
            } else {
                $this->error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
                return 1;
            }

        } catch (\Illuminate\Database\QueryException $e) {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {$e->getMessage()}");
            $this->warn("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã");
            return 1;
        } catch (\Exception $e) {
            $this->error("‚ùå –û—à–∏–±–∫–∞: {$e->getMessage()}");
            return 1;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram
     */
    private function getTelegramUsersCount(): int
    {
        return User::whereNotNull('telegram_chat_id')
            ->where('telegram_chat_id', '!=', '')
            ->count();
    }
}

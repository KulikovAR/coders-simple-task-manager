<?php

namespace App\Console\Commands;

use App\Services\FileUploadService;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Log;

class CleanupUnusedFiles extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'files:cleanup {--days=7 : –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤} {--dry-run : –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–û—á–∏—â–∞–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∞–π–ª—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã';

    /**
     * Execute the console command.
     */
    public function handle(FileUploadService $fileUploadService)
    {
        $days = $this->option('days');
        $dryRun = $this->option('dry-run');

        $this->info("üîç –ü–æ–∏—Å–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ä—à–µ {$days} –¥–Ω–µ–π...");

        try {
            if ($dryRun) {
                $this->info('üîç –†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (dry-run)');
                
                // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                $unusedFiles = $this->getUnusedFiles($days);
                
                if ($unusedFiles->isEmpty()) {
                    $this->info('‚úÖ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                    return 0;
                }

                $this->warn("üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {$unusedFiles->count()}");
                
                $this->table(
                    ['ID', '–ò–º—è —Ñ–∞–π–ª–∞', '–†–∞–∑–º–µ—Ä', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞'],
                    $unusedFiles->map(function ($file) use ($fileUploadService) {
                        return [
                            $file->id,
                            $file->original_name,
                            $fileUploadService->formatFileSize($file->file_size),
                            $file->created_at->format('Y-m-d H:i:s'),
                            $file->attachable_type ?? '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'
                        ];
                    })
                );

                $this->info('üí° –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ --dry-run');
                
            } else {
                $this->info('üóëÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤...');
                
                $deletedCount = $fileUploadService->cleanupUnusedFiles($days);
                
                if ($deletedCount > 0) {
                    $this->info("‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {$deletedCount}");
                    Log::info("–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", ['deleted_count' => $deletedCount]);
                } else {
                    $this->info('‚úÖ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                }
            }

            return 0;

        } catch (\Exception $e) {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {$e->getMessage()}");
            Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return 1;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
     */
    private function getUnusedFiles(int $days)
    {
        return \App\Models\FileAttachment::where('created_at', '<', now()->subDays($days))
            ->whereNull('attachable_id')
            ->get();
    }
}

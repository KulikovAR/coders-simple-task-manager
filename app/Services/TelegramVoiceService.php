<?php

namespace App\Services;

use App\Models\User;
use App\Services\Ai\FlexibleAiAgentService;
use App\Services\Ai\CommandRegistry;
use App\Services\AiConversationService;
use App\Services\CommentService;
use Exception;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class TelegramVoiceService
{
    private VoiceToTextService $voiceToTextService;
    private TelegramService $telegramService;
    private string $botToken;

    public function __construct(
        VoiceToTextService $voiceToTextService,
        TelegramService $telegramService
    ) {
        $this->voiceToTextService = $voiceToTextService;
        $this->telegramService = $telegramService;
        $this->botToken = config('telegram.bot_token');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
     */
    public function processVoiceMessage(array $message, string $chatId): void
    {
        try {
            $voice = $message['voice'] ?? null;
            if (!$voice) {
                $this->telegramService->sendMessage($chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
                return;
            }

            $fileId = $voice['file_id'] ?? null;
            $duration = $voice['duration'] ?? 0;
            $mimeType = $voice['mime_type'] ?? 'audio/ogg';

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç)
            if ($duration > 300) {
                $this->telegramService->sendMessage($chatId, '‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç.');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            if (!$this->voiceToTextService->isSupportedFormat($mimeType)) {
                $this->telegramService->sendMessage($chatId, '‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: OGG, MP3, WAV, M4A, WebM.');
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            $fileInfo = $this->getFileInfo($fileId);
            if (!$fileInfo) {
                $this->telegramService->sendMessage($chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
                return;
            }

            $fileUrl = $fileInfo['file_path'];
            $fullFileUrl = "https://api.telegram.org/file/bot{$this->botToken}/{$fileUrl}";

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            $this->telegramService->sendMessage($chatId, 'üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ—Å –≤ —Ç–µ–∫—Å—Ç
            $transcribedText = $this->voiceToTextService->convertVoiceToText($fullFileUrl, $fileId);

            if (empty($transcribedText)) {
                $this->telegramService->sendMessage($chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.');
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            $this->telegramService->sendMessage($chatId, "üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n<i>{$transcribedText}</i>");

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $fromId = $message['from']['id'] ?? null;
            $user = $fromId ? User::where('telegram_chat_id', (string)$fromId)->first() : null;

            if (!$user) {
                $this->telegramService->sendMessage($chatId, '‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à <b>senderId</b> –≤ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ —Å–∞–π—Ç–µ (–ø–æ–ª–µ Telegram chatId).');
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
            $this->telegramService->sendMessage($chatId, 'ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...');

            $aiService = $this->createFlexibleAiAgentService();
            $result = $aiService->processRequest($transcribedText, $user, null);

            $reply = $result['message'] ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.';
            $this->telegramService->sendMessage($chatId, $reply);

            Log::info('Voice message processed successfully', [
                'chat_id' => $chatId,
                'user_id' => $user->id,
                'file_id' => $fileId,
                'duration' => $duration,
                'transcribed_text' => $transcribedText,
                'ai_response_length' => strlen($reply)
            ]);

        } catch (Exception $e) {
            Log::error('Voice message processing failed', [
                'chat_id' => $chatId,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            $this->telegramService->sendMessage($chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –æ—Ç Telegram API
     */
    private function getFileInfo(string $fileId): ?array
    {
        try {
            $response = Http::get("https://api.telegram.org/bot{$this->botToken}/getFile", [
                'file_id' => $fileId
            ]);

            if (!$response->successful()) {
                Log::error('Failed to get file info from Telegram', [
                    'file_id' => $fileId,
                    'status' => $response->status(),
                    'body' => $response->body()
                ]);
                return null;
            }

            $data = $response->json();
            return $data['result'] ?? null;

        } catch (Exception $e) {
            Log::error('Exception while getting file info', [
                'file_id' => $fileId,
                'error' => $e->getMessage()
            ]);
            return null;
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä FlexibleAiAgentService
     */
    private function createFlexibleAiAgentService(): FlexibleAiAgentService
    {
        $commandRegistry = new CommandRegistry(
            app(ProjectService::class),
            app(TaskService::class),
            app(SprintService::class),
            app(CommentService::class)
        );

        $contextProviders = [
            app(\App\Services\Ai\ContextProviders\UserContextProvider::class),
            app(\App\Services\Ai\ContextProviders\ProjectContextProvider::class),
            app(\App\Services\Ai\ContextProviders\SprintContextProvider::class),
            app(\App\Services\Ai\ContextProviders\EnumsContextProvider::class),
            app(\App\Services\Ai\ContextProviders\DynamicStatusContextProvider::class),
        ];

        return new FlexibleAiAgentService(
            $commandRegistry,
            $contextProviders,
            app(AiConversationService::class)
        );
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–º
     */
    public function isVoiceMessage(array $message): bool
    {
        return isset($message['voice']) && is_array($message['voice']);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
     */
    public function getVoiceInfo(array $message): ?array
    {
        if (!$this->isVoiceMessage($message)) {
            return null;
        }

        $voice = $message['voice'];
        return [
            'file_id' => $voice['file_id'] ?? null,
            'duration' => $voice['duration'] ?? 0,
            'mime_type' => $voice['mime_type'] ?? 'audio/ogg',
            'file_size' => $voice['file_size'] ?? null
        ];
    }
}
